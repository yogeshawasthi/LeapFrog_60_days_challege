day 16
 Explored Today : 
SOP(Same Origin Policy)
CORS(Cross Origin Resource Sharing)
Why Do We need them?
Whitelisting, blacklisting in CORS



# Learned about typescript
let num = 5
let message:string = "hello world"
let isNeplai = true

//Arrays

let numbers:number[] = [1,2,3,]
let names:string[]=["Yogesh","awasthi","patanjali"]


//enum
enum Direction{
    Up,
    Down,
    Left,
    Right
}

let useDirection:Direction = Direction.Up
interface Person{
    name : string;
    age: number;
    isNepali:boolean;
}

// let user={
//     name :"Yogesh awasthi",
//     age : 22,
//     isNepali:true

// }

// interface Emplyoee extends Person{
//     role:string;
    
// }
// let emplyoee:Emplyoee={
//     age:22,
//     name:"yogesh awasthi",
//     isNepali:true,
//     role:"Developer"
// }

type ID = number
let userId:ID =12

type Username = string
let useName:Username = "Yogesh Awasthi"
let useName2:Username = "Arjun Chaudhary"

// union 
type Id = number | string
let userId2:Id = 999
let userId3:Id = "Yogesh"

//intersection
type Employee = {
    name : string;
    role : string
}
type Skill={
    langauge:string
}

type SoftwareEngineer = Employee & Skill

let developer:SoftwareEngineer = {
    name:"Yogesh",
    role :"Fronted Dev",
    langauge:"JavaScript"

}


//functions in tspan
function add(a:number,b:number):number | void{
    return a+b
    
}
let result =add(2,3);

type Multiply = (a:number,b:number)=>number
const mltiply:Multiply = (a,b)=>a*b

let result2 = mltiply(1,2)

interface User{
    id : number,
    name : string,
    email?:string //?-->optional
}

let friend1:User={
    id: 1,
    name:"Yogesh awasthi",
    email :"hellow@gmail.com"
}




typescript generic and OOP




//OOP - Object orineted Programming

//Typescript generic and oop 
//Day 22


function addTwoNumber(num1:number,num2:number):number{
    return num1+num2
}
addTwoNumber(2,3)
function addTwoString(str1:string,str2:string):string{
    return str1+str2
}
function add<T>(data1:T,data2:T):string{
    return `${data1} + ${data2}`
}
add<string>('1','2')


function identity<T>(param:T):T{
    return param
}


let res = identity<string>("hellow everybody")
console.log(res)

interface Data <T,U>{
    frist : T,
    second:U
}

let data:Data<number,string>={
    frist:1,
    second:"Hello everybody"
}

let data2: Data<string,number>={
    frist:"Yogesh",
    second:42
}

console.log(data.frist)
console.log(data.second)

console.log(data2)

function combine<T extends string|number>(a:T,b:T):string{
    return`${a}${b}`
}
 let result2 = combine("Yogesh"," Awasthi") 
let result1 = combine(12,12)
console.log(result2)



class Developer{
    name
    position
    
    constructor(name,position){
        this.name = name
        this.position = position
    }
    code(text){
        console.log("I am not Good at Coding" + text)
    }
}

let yogesh = new Developer("0",'Full Stack Developer')
let arjun = new Developer('Arjun Chaudhary','Frontend Developer & Video Editor')
console.log(yogesh.name)
console.log(arjun.position) 
arjun.code("i am arjun chaudhary")



/  Day 22/ OOP Principles inheritence , polymorphism , encapsulation , abstraction



// inheritance
class Animal{
    name : string
    sound : string

    constructor(name:string,sound:string){
        this.name = name
        this.sound = sound
    }
    makeSound():void{
        console.log(`${this.name} says ${this.sound}`)
    }
}
class Bird extends Animal{
    canFly:boolean

    constructor(name:string,sound:string,canFly:boolean){
        super(name,sound)
        this.canFly = canFly
    }
    fly():void{
        if(this.canFly){
            console.log(`${this.name} is flying`)
        }else{
            console.log(`${this.name} cannot Fly`)
        }
    }

}
const eagle= new Bird('Eagel','Screech',true)
const ostrich = new Bird('Ostrich','scream',false)
eagle.makeSound()
eagle.fly()
eagle.name

ostrich.fly()



class Shape{
    color: string

    constructor (color:string){
        this.color = color
    }
    displyaColor():void{
        console.log(`Color : ${this.color}`)
    }
}


class Circle extends Shape{
    radius : number

    constructor(radius:number,color:string){
        super(color)
        this.radius = radius
    }
    calculateArea():number{
        return Math.PI * this.radius ** 2
    }
}

class Rectangle extends Shape{
    width : number
    height : number

    constructor(width:number,height:number,color:string){
        super(color)
        this.width = width
        this.height = height
    }

    calculateArea():number{
        return this.width * this.height
    }

}

const blueCirlce = new Circle(5,'blue')
blueCirlce.displyaColor()
console.log(blueCirlce.calculateArea())

const redRectangle = new Rectangle (2,5,'pink')


//polymorphism

class Cat{
    makeSound():void{
        console.log("Meow")
    }
}
class Dog{
    makeSound():void{
        console.log("Bau Bau")
    }
}
function petSounds(pet:any):void{
    pet.makeSound()
}
const mycat = new Cat()
const myDog = new Dog()


petSounds(mycat)
petSounds(myDog)


//encapsulation

class Person{
  private  _name:string
    constructor(name:string){
        this._name = name
    }
    getName():string{
        return this._name
    }
    setName(newName:string):void{
        this._name = newName

    }
}


const person = new Person('Yogesh')
console.log(person.setName('Hellow'))
console.log(person.getName())




// abstraction

class Shape{
    private _color:string
    constructor(private color:string){
        this._color = color
    }
//abstractioning the implementation detials
    private _calculatePerimeter():number{
        console.log("Calculating Perimeter")
        return 0;
    }

    displyaInfo():void{
        const perimeter = this._calculatePerimeter()
        console.log(`perimeter : ${perimeter}`)
    }
}

const myShape = new Shape('red')
myShape.displyaInfo()







